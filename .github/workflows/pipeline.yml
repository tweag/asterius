name: pipeline

on:
  - push
  - pull_request

jobs:

  boot:
    name: boot
    runs-on: ubuntu-20.04
    steps:

      - name: setup-haskell
        uses: actions/setup-haskell@v1
        with:
          ghc-version: 8.8.4
          cabal-version: 3.2.0.0
          stack-version: 2.5.1
          enable-stack: true

      - name: setup-node-15
        uses: actions/setup-node@v2-beta
        with:
          node-version: 15.6.0

      - name: checkout
        uses: actions/checkout@v2

      - name: materialize
        run: |
          mkdir lib

          pushd lib

          mkdir ~/.stack
          echo "system-ghc: true" > ~/.stack/config.yaml
          ../utils/make-packages.py
          rm -rf ghc

          popd

      - name: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib
          path: lib

      - name: setup-deps
        run: |
          .github/workflows/setup-deps.sh

      - name: boot
        run: |
          .github/workflows/boot.sh

      - name: upload-cache
        uses: actions/cache@v2
        with:
          key: cache-${{ github.sha }}
          path: |
            ~/.stack
            **/.stack-work
            lib

  test:
    name: test-${{ matrix.with-pic }}
    needs: boot
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        with-pic:
          - "--pic"
          - ""
    env:
      ASTERIUS_WITH_PIC: ${{ matrix.with-pic }}
    steps:

      - name: setup-haskell
        uses: actions/setup-haskell@v1
        with:
          ghc-version: 8.8.4
          cabal-version: 3.2.0.0
          stack-version: 2.5.1
          enable-stack: true

      - name: setup-node-15
        uses: actions/setup-node@v2-beta
        with:
          node-version: 15.6.0

      - name: checkout
        uses: actions/checkout@v2

      - name: download-cache
        uses: actions/cache@v2
        with:
          key: cache-${{ github.sha }}
          path: |
            ~/.stack
            **/.stack-work
            lib

      - name: setup-deps
        run: |
          .github/workflows/setup-deps.sh

      - name: setup-wasm-deps
        run: |
          . ./.envrc
          ahc-cabal v1-update
          pushd ghc-toolkit/boot-libs
          ahc-cabal v1-install -j2 \
            wai-middleware-caching
          popd

      - name: test
        run: |
          export WASI_SDK_PREFIX=/opt/wasi-sdk

          stack test asterius:fib --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:jsffi --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:array --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:stableptr --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:rtsapi --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:teletype --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:bytearray --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:bigint --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:todomvc --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:cloudflare --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:cloudflare-new --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:exception --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:regression60 --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:sizeof_md5context --test-arguments="$ASTERIUS_WITH_PIC"
          stack test asterius:largenum --test-arguments="$ASTERIUS_WITH_PIC"

          stack test asterius:bytearray --test-arguments="--yolo $ASTERIUS_WITH_PIC"
          stack test asterius:bytearray --test-arguments="--gc-threshold=128 $ASTERIUS_WITH_PIC"
          stack test asterius:fib --test-arguments="--no-gc-sections $ASTERIUS_WITH_PIC"

          stack test asterius:fib --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          stack test asterius:jsffi --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          stack test asterius:array --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          stack test asterius:stableptr --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          stack test asterius:rtsapi --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          stack test asterius:teletype --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          # stack test asterius:bytearray --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          stack test asterius:bigint --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null
          stack test asterius:exception --test-arguments="--debug $ASTERIUS_WITH_PIC" &> /dev/null

          stack test asterius:fib --test-arguments="--tail-calls $ASTERIUS_WITH_PIC"
          stack test asterius:fib --test-arguments="--tail-calls --no-gc-sections $ASTERIUS_WITH_PIC"

          # stack test asterius:nomain --test-arguments="$ASTERIUS_WITH_PIC"
          # stack test asterius:nomain --test-arguments="--tail-calls $ASTERIUS_WITH_PIC"

          stack test asterius:th --test-arguments="$ASTERIUS_WITH_PIC"

          stack test asterius:primitive --test-arguments="$ASTERIUS_WITH_PIC"

          stack test asterius:argv --test-arguments="$ASTERIUS_WITH_PIC"

          stack test asterius:endianness --test-arguments="$ASTERIUS_WITH_PIC"

  ghc-testsuite:
    name: ghc-testsuite
    needs: boot
    runs-on: ubuntu-20.04
    steps:

      - name: setup-haskell
        uses: actions/setup-haskell@v1
        with:
          ghc-version: 8.8.4
          cabal-version: 3.2.0.0
          stack-version: 2.5.1
          enable-stack: true

      - name: setup-node-15
        uses: actions/setup-node@v2-beta
        with:
          node-version: 15.6.0

      - name: checkout
        uses: actions/checkout@v2

      - name: download-cache
        uses: actions/cache@v2
        with:
          key: cache-${{ github.sha }}
          path: |
            ~/.stack
            **/.stack-work
            lib

      - name: setup-deps
        run: |
          .github/workflows/setup-deps.sh

      - name: ghc-testsuite
        run: |
          export WASI_SDK_PREFIX=/opt/wasi-sdk
          export GHCRTS=-N2
          stack test asterius:ghc-testsuite --test-arguments="-j2 --timeout=300s" || true

      - name: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: test-report.csv
          path: asterius/test-report.csv

  test-cabal:
    name: test-cabal
    needs: boot
    runs-on: ubuntu-20.04
    steps:

      - name: setup-haskell
        uses: actions/setup-haskell@v1
        with:
          ghc-version: 8.8.4
          cabal-version: 3.2.0.0
          stack-version: 2.5.1
          enable-stack: true

      - name: setup-node-15
        uses: actions/setup-node@v2-beta
        with:
          node-version: 15.6.0

      - name: checkout
        uses: actions/checkout@v2

      - name: download-cache
        uses: actions/cache@v2
        with:
          key: cache-${{ github.sha }}
          path: |
            ~/.stack
            **/.stack-work
            lib

      - name: setup-deps
        run: |
          .github/workflows/setup-deps.sh

      - name: test-cabal
        run: |
          export WASI_SDK_PREFIX=/opt/wasi-sdk

          . ./.envrc
          pushd ghc-toolkit/boot-libs

          ahc-cabal update

          pushd $(mktemp -d)
          ahc-cabal v2-install --installdir . hello
          ahc-dist --input-exe hello --run
          popd

          export ASTERIUS_AHC_LD_IGNORE=1
          ahc-cabal v1-install --ghc-option=-j2 \
            Cabal
          ahc-cabal v1-install -j2 \
            diagrams \
            hlint \
            miso

          popd

  image:
    name: image-${{ matrix.image }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        image:
          - base
          - dev
          - dev.rootless
    env:
      ASTERIUS_IMAGE: ${{ matrix.image }}
    steps:

      - name: checkout
        uses: actions/checkout@v2

      - name: build
        run: |
          podman build \
            --file $ASTERIUS_IMAGE.Dockerfile \
            --label "gitrev=$(git rev-parse HEAD)" \
            --squash \
            --tag terrorjack/asterius:$ASTERIUS_IMAGE \
            .

          podman push terrorjack/asterius:$ASTERIUS_IMAGE docker-daemon:terrorjack/asterius:$ASTERIUS_IMAGE
          docker save terrorjack/asterius:$ASTERIUS_IMAGE | zstd -T2 -12 -o image-$ASTERIUS_IMAGE.tar.zst

      - name: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: image-${{ matrix.image }}
          path: image-${{ matrix.image }}.tar.zst

  docs:
    name: docs
    runs-on: ubuntu-20.04
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    steps:

      - name: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.1

      - name: setup-node-15
        uses: actions/setup-node@v2-beta
        with:
          node-version: 15.6.0

      - name: setup-deps
        run: |
          pip install \
            recommonmark \
            sphinx
          npm install -g \
            netlify-cli

      - name: checkout
        uses: actions/checkout@v2

      - name: docs
        run: |
          cd docs
          sphinx-build . _build

          cp tweag-logo.svg _build

          mkdir _build/demo
          pushd _build/demo

          mkdir diagrams
          pushd diagrams
          curl -L https://asterius.s3-us-west-2.amazonaws.com/diagrams.tar | tar x
          popd

          mkdir pandoc
          pushd pandoc
          curl -L https://asterius.s3-us-west-2.amazonaws.com/pandoc.tar | tar x
          popd

          mkdir ormolu
          pushd ormolu
          curl -L https://asterius.s3-us-west-2.amazonaws.com/ormolu.tar | tar x
          popd

          mkdir todomvc
          pushd todomvc
          curl -L https://asterius.s3-us-west-2.amazonaws.com/todomvc.tar | tar x
          popd

          popd

          if [ $GITHUB_REPOSITORY = "tweag/asterius" ]
          then
            if [ $(git rev-parse --abbrev-ref HEAD) = "master" ]
            then
              netlify deploy --dir=_build --message="$GITHUB_REF-$GITHUB_SHA" --prod
            else
              netlify deploy --dir=_build --message="$GITHUB_REF-$GITHUB_SHA"
            fi
          fi
